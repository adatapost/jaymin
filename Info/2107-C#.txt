 The Console Project Template
 =============================

  In order to learn C# language from the scratch, the visual studio provide an easy approach to write and learn the code
  via "Console" project. The term 'Console' means "Terminal" -- where it takes input and write output at    console/terminal.

  The Console project template is an executable assembly and hence we require an entry point method -- Main() with
  following syntax:

     1. static void Main() { }
     2. static int Main() { return 0; }
     3. static void Main(String []args) { }
     4. static int Main(String []args) {  return 0; }

     You can choose any one from the above syntax to define a Main() method --- Note that the "M" is Main is upper
     letter.


  Step-1

       Open the visual studio

  Step - 2
       File + New + Project + Select the Language "Visual C#" + Select "Console Application" template +
       Select the appropriate folder name where you want to create the program and also specify the
       proper "project name".  

             Use the "ProperCase" to name the project.

			For example,    FirstApp
					EmployeeMeetingApp
				        CollegeMgnApp

  Step-3

      After selecting "Console" template, the VS will create a project/program and you can see the components of
      newly created projects via "Solution Explorer" windows (Or You can open it via View Menu + Solution Explorer).

      There will be a file named "Program.cs". The C# code uses .cs extension but it is not mandatory to use .cs 
      extension.

      Now, open the Program.cs and remove all the code written in that file and write following code:


class Help
{
    static void Main()
    {
        System.Console.WriteLine("This is the first C# Program!!!");
    }
}

 Step-4 

     To run the program we've two configurations:

       1. Run with debugging - Press F5 or Debug Menu

           In this configuration, Visual Studio and .NET Debug Libraries are used to run the program with debug
		ability.

        2. Run without debugging - Press CTRL + F5  or Debug Menu

           In this configuration, VS will stops the debug ability and run the assembly directly.

  To debug an app means - An application runs by the developer to test or examin the flow and control of the program.


Example - Write following code

class Sample
{
  static void Main()
   {
     System.Console.Write("This method prints without adding a new line!");
     System.Console.Write("..On very same line...!!!");
    
     //But you may use escape sequence character \n

     System.Console.Write("\nThis is the \nnewline.");
    
     //WriteLine() method print data and then add a newline \n
     System.Console.WriteLine("This is line1");
     System.Console.WriteLine("This is line2");
    }
}


Local variables
===============

Local variables are not initialized automatically so we must have to assign them before the use.

class First 
{
  static void Main()
   {
     int n;
 
     System.Console.WriteLine(n);
    }
}

Above code will not compiled because "n" variable is not initialized before its use. 

Here, we must have to assign any appropriate value to "n" before printing its content.


Importing a namespace and creating an alias of Type
====================================================

the "using" statement appears at top of the compilation unit import a namespace and also creates an alias of datatype.

What is "importing namespace"?

    This means to inform the compiler that the given namespace types can be written in a code file
    without adding/writing namespace.

Syntax:

using Namespace;
using Namespace.SubNamespace;

  Note that you can't import a specific type/datatype instead we've to import a namespace.

Syntax: To create an alias (second name) of type

using alias = Namespace.TypeName;

Example:

using System;
using Cn = System.Console;
class Test
{
    static void Main()
    {
        Console.WriteLine("Without namespace");
        System.Console.WriteLine("With namespace");
        Cn.WriteLine("This is an alias");
    }
}   


How to create local variables?
-------------------------------

 Syntax:   TypeName varName;

           var   varName = value;

           dynamic varName;


  To create a variable we need to assign a value sometimes. Here, in second syntax, the variable's type is determined
  by the type of assigned value.

Example: code in main

 int no = 100;  
 float amount = 1000.00f;   // Default type of "1000.00" is double hence we need to cast it

 Console.WriteLine(no + " " + amount);


The var keyword
---------------- 
 We can also create local variables using "var". The "var" is compiler specific type and C# compiler select datatype
 of the variable from the datatype of assigned value.

For instance,    var no;   is invalid
             but var no = 10; is valid and the type of no is "int"
                 var amount = 10.10;    // double type
                 var amount1 = 10.10f;  // float type

 Note that the "var" must be used inside the functions or block -- to create local variables.

Example:

using System;
class Test
{
  static void Main()
   {
     var age = 10;
     var name = "Rajesh";

     Console.WriteLine("Name     : " + name);
     Console.WriteLine("Age      : " + age);

     for(var i = 1;i<=10;i++)     // var i = 0.1; will change the double type
       {
         Console.WriteLine(i);
       }
   }//EndMain
}//EndClass
  
The dynamic keyword
--------------------
It is general purpose keyword and it can be used for different purposes including the local variable in following example.

 The datatype of "dynamic" variable is determined by the CLR's another implementation called DLR - Dynamic  Language Runtime. (During program execution).

Example: code in Main()

        dynamic data;
        
        data = 10;
        data++;
        Console.WriteLine(data);
        data = "Hello";
        //data = 10.10;
        Console.WriteLine(data.Length);

 

